Using ``matrix_divided``
-----------------------

Ensures all elements in the matrix are either ints or floats
Ensures all sublists in the matrix have the same length
Checks if 'div' is a float, int, or 0
Divides each element in the matrix by 'div'
Returns a new matrix

First, import ``matrix_divided``:

    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Now, apply it:

Basic usage:
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> print(matrix_divided(matrix, 3))
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

Non int/float inputs within the matrix lists:
    >>> matrix = [['h', 'o', 'l'], ['b', 5, 6]]
    >>> print(matrix_divided(matrix, 5))
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Division by zero:
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> print(matrix_divided(matrix, 0))
    Traceback (most recent call last):
    ...
    ZeroDivisionError: division by zero

Unequal list lengths within the matrix:
    >>> matrix = [[1, 2, 3], [4, 5]]
    >>> print(matrix_divided(matrix, 2))
    Traceback (most recent call last):
    ...
    TypeError: Each row of the matrix must have the same size

Negative values within the matrix:
    >>> matrix = [[1, 2, -3], [4, 5, -6]]
    >>> print(matrix_divided(matrix, 2))
    [[0.5, 1.0, -1.5], [2.0, 2.5, -3.0]]

Empty matrix:
    >>> matrix = [[]]
    >>> print(matrix_divided(matrix, 2))
    [[]]

No input provided:
    >>> print(matrix_divided())
    Traceback (most recent call last):
    ...
    TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'
